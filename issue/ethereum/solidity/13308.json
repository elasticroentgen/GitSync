{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/13308",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/13308/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/13308/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/13308/events",
  "html_url": "https://github.com/ethereum/solidity/issues/13308",
  "id": 1319654744,
  "node_id": "I_kwDOAm_5kc5OqFVY",
  "number": 13308,
  "title": "Stop the war on for loops",
  "user": {
    "login": "fulldecent",
    "id": 382183,
    "node_id": "MDQ6VXNlcjM4MjE4Mw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/fulldecent",
    "html_url": "https://github.com/fulldecent",
    "followers_url": "https://api.github.com/users/fulldecent/followers",
    "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
    "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
    "organizations_url": "https://api.github.com/users/fulldecent/orgs",
    "repos_url": "https://api.github.com/users/fulldecent/repos",
    "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
    "received_events_url": "https://api.github.com/users/fulldecent/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2022-07-27T14:31:27Z",
  "updated_at": "2022-07-29T12:13:20Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "## Abstract\r\n\r\nAdd a specific overflow check optimization that will make many for-loop optimizations unnecessary.\r\n\r\n## Motivation\r\n\r\nToo many people are saying this is bad:\r\n\r\n```solidity\r\nfor (uint256 mintCounter = 0; mintCounter < quantity; mintCounter++) {\r\n    _mint(msg.sender, _assembleTokenID(dropID, mintCounter));\r\n}\r\n```\r\n\r\ncompared to this:\r\n\r\n```solidity\r\nfor (uint256 mintCounter = 0; mintCounter < quantity;) {\r\n    _mint(msg.sender, _assembleTokenID(dropID, mintCounter));\r\n    unchecked{\r\n        mintCounter++\r\n    }\r\n}       \r\n```\r\n\r\n## Specification\r\n\r\n### Note\r\n\r\nFor reference, a for-loop like this:\r\n\r\n```\r\nfor (A; B; C) {D}\r\n```\r\n\r\nis implemented like this:\r\n\r\n```basic\r\n10 A\r\n\r\n100 if !B GOTO 999\r\n110 D\r\n120 C\r\n130 GOTO 100\r\n\r\n999 EXIT\r\n```\r\n\r\n### New optimization\r\n\r\nIf inside a single code unit, if:\r\n\r\n1. a variable has bit width X,\r\n2. the variable is compared to be less than some quantity with bit width <=X,\r\n3. the variable is not set until step 4 here, then\r\n4. the variable is incremented;\r\n\r\nthen that incrementation in step 4 need not be safety checked. Or in $\\LaTeX$:\r\n\r\n$$x < a <= w \\implies x+1 <= w$$\r\n\r\n### Documentation\r\n\r\nPeople like being fancy, so even if this is implemented, they will still use the `unchecked` \"optimization\" until it can be clearly explained that it is unnecessary.\r\n\r\nSo the documentation should be updated to specify that the gas cost of this code:\r\n\r\n```solidity\r\ncontract C {\r\n    event E;\r\n    constructor(uint256 count) {\r\n        for (uint256 i = 0; i < count; i++) {\r\n            emit E(i);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nshall not exceed that of this code:\r\n\r\n```solidity\r\ncontract CUnchecked {\r\n    event E;\r\n    constructor(uint256 count) {\r\n        for (uint256 i = 0; i < count;) {\r\n            unchecked {\r\n                emit E(i);\r\n                i++;\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nAnd this can be checked with a test case.\r\n\r\nThere is precedent in this with JavaScript where the specification requires that implementations implement tail-end recursion optimization.\r\n\r\n## Backwards Compatibility\r\n\r\nn/a\r\n\r\n---\r\n\r\nInspired by the discussion with @FrankNFT-labs at https://github.com/LightArtists/light-smart-contracts/issues/2",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/13308/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/13308/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1197631669",
    "html_url": "https://github.com/ethereum/solidity/issues/13308#issuecomment-1197631669",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13308",
    "id": 1197631669,
    "node_id": "IC_kwDOAm_5kc5HYmi1",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-28T04:04:40Z",
    "updated_at": "2022-07-28T04:28:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "The second optimization is:\r\n\r\nIf inside a single code unit, if:\r\n\r\n1. an unsigned variable is compared to be greater than some value,\r\n2. the variable is not set until step 3 here, then\r\n3. the variable is decremented,\r\n\r\nthen that decrementation in step 3 need not be safety checked. Or in $\\LaTeX$:\r\n\r\n$$x > a >= 0 \\implies x-1 > = 0$$",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1197631669/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1199206174",
    "html_url": "https://github.com/ethereum/solidity/issues/13308#issuecomment-1199206174",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13308",
    "id": 1199206174,
    "node_id": "IC_kwDOAm_5kc5Hem8e",
    "user": {
      "login": "migoldfinger",
      "id": 106750422,
      "node_id": "U_kgDOBlzh1g",
      "avatar_url": "https://avatars.githubusercontent.com/u/106750422?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/migoldfinger",
      "html_url": "https://github.com/migoldfinger",
      "followers_url": "https://api.github.com/users/migoldfinger/followers",
      "following_url": "https://api.github.com/users/migoldfinger/following{/other_user}",
      "gists_url": "https://api.github.com/users/migoldfinger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/migoldfinger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/migoldfinger/subscriptions",
      "organizations_url": "https://api.github.com/users/migoldfinger/orgs",
      "repos_url": "https://api.github.com/users/migoldfinger/repos",
      "events_url": "https://api.github.com/users/migoldfinger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/migoldfinger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-29T12:13:19Z",
    "updated_at": "2022-07-29T12:13:19Z",
    "author_association": "NONE",
    "body": "I see where this comes from, my first thought however is an fancy endles loop thats been created like that if for loops are optimized with your idea.\r\n\r\n```\r\nuint256 quantity = 100000;\r\nfor (uint8 mintCounter = 0; mintCounter < quantity; mintCounter++)\r\n{\r\n    _mint(msg.sender, _assembleTokenID(dropID, mintCounter));\r\n}\r\n```\r\nThis would result in an infinite loop if I am not mistaken.\r\nOf cource the unchecked code example will too but there it is the devs fault entirely.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1199206174/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
